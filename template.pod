=encoding utf8

=head1 JavaScript backend for Rakudo 

=over 1

=item Name:

Pawe≈Ç Murias

=item Amount Requested:

USD 3,000 [How much is your project worth?]

=back

=head2 Synopsis

[A short description]


TODO


=head2 Benefits to the Perl Community

[Is this work worth doing? Why should the Perl Community grant
this project?]

A JavaScript backend for Rakudo will allow the use of Perl 6 in many new niches.
The main focus of the grant is to allow Perl 6 to be used for writing the frontend part of single page applications.
A side benefit of the grant is that I intend to create a web-base REPL that should allow users to play around with Perl 6 without installing it.

=head2 Deliverables

[Quantifiable results e.g. "Improve X modules in ways Y and Z",
"Write 3 articles for X website".]

[If you cannot clearly define the deliverables, you are not quite ready
to submit this.]

=over

=item *

Upload rakudo-js to npm and CPAN.

=item *

Have this rakudo-js be able compile our chosen subset of roast to JavaScript and pass them in a modern browser.

=item *

Write a simple REPL in Perl 6 that will run in a modern browser.

=back

=head2 Project Details

[A more detailed description.]

[It will be beneficial to include the progress made to date (if any).
If you aren't the primary maintainer of the project you want funding
for, show that you have endorsement from the primary maintainer.]

=head2 Inch-stones

[Break down your project into small chunks. By listing your tasks
adequately, other people will understand you know what you need to do.]

[Try and think in "inch-stones" rather than "mile-stones". Breaking down
your grant into many small goals makes it harder to overlook
difficulties, and easier to see progress as you complete your grant.]

=over

=item * 

Finish up serialization of closures in the nqp-js-running-on-js.

=item *
Cleanup the array handling in nqp-js.

=item *
Go through the MoarVM opcode list and where it's possible write tests for untested opcode and implement them in nqp-js

=item *
Do the obvious speedups for the code generated by nqp-js.

=item *
Get the part of the rakudo setting written in NQP (mostly the meta-model and code bootstraping it) to compile under nqp-js.

=item *
Implement a bunch p6 specific ops.

=item *
Get rakudo to compile on nqp-js.

=item *
Get rakudo compiled to js to correctly compile nqp::say("Hello World").

=item *
Get the rakudo setting to compile.

=item *
Get rakudo compiled to js to correctly compile say("Hello World").

=item *
Get Test.pm to correctly compile.

=item *
Pass a first test.

=item *
Go through roast test fixing bugs and implementing missing things to make them pass.

=item *
Pass the part of roast we focus on node.js.

=item *
Be able to webpack the generated javascript code.

=item *
Be able to run tests in the browser.

=item *
Pass the part of roast we focus on in a browser.

=item *
Polish up source maps support.

=item *
Implement (and test) interopablity with javascript code

=item *
Upload rakudo-js on npm.

=item *
Write a simple Perl6 REPL that should run in modern browser.

=item *
Put the REPL on try.perl6.org if the community views it as good enough.

=back

=head2 Project Schedule

[How long will the project take? When can you begin work?
Be realistic.]

=head2 Completeness Criteria

[Describe how your grant can be evaluated. For instance, code will be
merged in Perl tree, or a module will be released to CPAN with the
specified features, etc.]

=over

=item *
    Rakudo-js released on npm

=item *
    Rakudo-js passes our choosen subset of roast

=item *
    A simple Perl 6 REPL running in modern browser (for evaluation purposes Google Chrome)

=back

=head2 List of tests we want to pass

We want to pass tests from the official Perl 6 Test Suit "Roast".
It can be found on github.com/perl6/roast.

For the purpose of the grant we focus on a subset of those (mainly excluding IO and OS interaction).
Some tests might be broken for reasons outside the JavaScript backend so that for grant completeness purposes we are only concerned with the tests that pass on the Rakudo MoarVM backend.

We want to pass the tests in the following subdirectories of roast:

=over

=item *

S02-lexical-conventions

=item *

S02-lists

=item *

S02-literals

=item *

S02-magicals

=item *

S02-names

=item *

S02-names-vars

=item *

S02-one-pass-parsing

=item *

S02-packages

=item *

S02-types

=item *

S03-binding

=item *

S03-feeds

=item *

S03-junctions

=item *

S03-metaops

=item *

S03-operators

=item *

S03-sequence

=item *

S03-smartmatch

=item *

S04-blocks-and-statements

=item *

S04-declarations

=item *

S04-exception-handlers

=item *

S04-exceptions

=item *

S04-phasers

=item *

S04-statement-modifiers

=item *

S04-statement-parsing

=item *

S04-statements

=item *

S05-capture

=item *

S05-grammar

=item *

S05-interpolation

=item *

S05-mass

=item *

S05-match

=item *

S05-metachars

=item *

S05-metasyntax

=item *

S05-modifier

=item *

S05-nonstrings

=item *

S05-substitution

=item *

S05-syntactic-categories

=item *

S05-transliteration

=item *

S06-advanced

=item *

S06-currying

=item *

S06-macros

=item *

S06-multi

=item *

S06-operator-overloading

=item *

S06-other

=item *

S06-routine-modifiers

=item *

S06-signature

=item *

S06-traits

=item *

S07-iterators

=item *

S09-autovivification

=item *

S09-hashes

=item *

S09-subscript

=item *

S09-typed-arrays

=item *

S10-packages

=item *

S11-modules

=item *

S12-attributes

=item *

S12-class

=item *

S12-construction

=item *

S12-enums

=item *

S12-introspection

=item *

S12-meta

=item *

S12-methods

=item *

S12-subset

=item *

S12-traits

=item *

S13-overloading

=item *

S13-syntax

=item *

S13-type-casting

=item *

S14-roles

=item *

S14-traits

=item *

S32-array

=item *

S32-basics

=item *

S32-container

=item *

S32-exceptions

=item *

S32-hash

=item *

S32-list

=item *

S32-num

=item *

S32-scalar

=item *

S32-str

=item *

S32-temporal

=item *

S32-trig

=back

=head2 Bio

Worked on the mildew/smop/kp6 Perl 6 implementations.
Worked on nqp-js outside of and as part of a Google Summer of Code project.

TODO - expand
[Who are you? What makes you the best person to work on this project?]

[Before submitting this proposal, review it again. Check the POD syntax.
Use a spell checker.  If possible, get it reviewed by someone who
understands the value of your project.]

=cut


